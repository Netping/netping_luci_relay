<script type="text/javascript">
//<![CDATA[
L.require('ui').then(function(ui) {
	L.require("session").then(function(session){
		L.require('dom').then(function(dom) {
			var UINotesBanner = ui.AbstractElement.extend(/** @lends LuCI.ui.Textarea.prototype */ {
				__init__: function(value, options) {
					this.value = value;
					this.options = Object.assign({
						"genitive_months": [" ", "января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"]
					}, options);
				},

				/** @override */
				render: function() {
					var divEl = E('div', {
						class: 'rs-result-message'
					});

					return this.bind(divEl);
				},

				/** @private */
				bind: function(divEl) {
					this.node = divEl;

					dom.bindClassInstance(divEl, this);
					this.setValue(this.value)
					if (!this.options.show)
						this.hide()



					this.registerEvents(window.EventBus.node, "disable-all-tabs", [
						'bus-disable-all-tabs'
					])

					this.node.addEventListener('disable-all-tabs', L.bind(function(ev){
						this.hide()
					}, this))

					this.registerEvents(window.EventBus.node, "times-dates-changed", [
						'bus-time-slider-changed',
						'bus-every-period-changed',
						'bus-dates-changed'
					])
					this.node.addEventListener("times-dates-changed", L.bind(function(ev){
						// do with delay because EventBus.addEventListener() has higher priority
						this.show()
						// function publish(this) {
						var tf = window.EventBus.timeframe,
							content = "",
							out = [];
						for(tab in tf) {
							var dates = [],
								days_months = []
								formatted_dates = [],
								tRanges = {},
								repeat = [],
								enabled = tf[tab]["enabled"];

							repeat = tf[tab].repeat_mode || []
							dates = tf[tab].dates || []

							if (!enabled) break;

							if(dates[0] == "") dates.shift()
							// dates will be "15, 16, 17-25 ноября" instead of 15.11.2020, 16.11.2020
							if((repeat.indexOf("Ежемесячно") > -1) && dates.length > 0) {
								dates = dates.map(function(day) {
									return day.substr(0,2)
								})
								formatted_dates = dates.join(", ") + " числа каждого месяца"
							} else if(repeat.indexOf("Ежегодно") > -1 && dates.length > 0) {
								days_months = dates.map(function(date) {
									return date.substr(0,5)
								})
								// make string "10, 11, 12 ноября каждого года", instead of "10.11, 11.11, 12.11"
								var res = {}
								days_months.forEach(function(item) {
									var m = item.substr(3,2)
									if (!(m in res)) res[m] = []
									res[m].push(item.substr(0,2))
								})
								for (m in res) {
									formatted_dates.push(res[m].join(", ") + " " + this.options.genitive_months[parseInt(m, 10)])
								}
								formatted_dates = formatted_dates.join(", ")
							} else if((repeat.indexOf("Еженедельно") > -1) && dates.length > 0) {

							} else if((repeat.length == 0) && dates.length > 0) {
								days_months = dates.map(function(date) {
									return date.substr(0,5)
								})
								// make string "10, 11, 12 ноября", instead of "10.11, 11.11, 12.11"
								var res = {}
								days_months.forEach(function(item) {
									var m = item.substr(3,2)
									if (!(m in res)) res[m] = []
									res[m].push(item.substr(0,2))
								})
								for (m in res) {
									formatted_dates.push(res[m].join(", ") + " " + this.options.genitive_months[parseInt(m, 10)])
								}
								formatted_dates = formatted_dates.join(", ")
							}
							tRanges = Object.values(tf[tab].timeranges).map(function(t) {
								var s = this.formatTime(t.split(",")[0]);
								var e = this.formatTime(t.split(",")[1]);
								return "c " + s + " до " + e
							}, this)
							
							out = repeat.concat(formatted_dates).concat(tRanges)
							content += "<dt>%h:".format(tf[tab].title)
							content += "<dd>%h".format(out.join(", "))
						}
						content = "<h4>Запретить отправку уведомлений</h4><dl>%s</dl>".format(content)
						this.setValue(content)	
						// }
						//setTimeout(publish, 200, this)
						// publish(this)
						
					}, this))


					return divEl;
				},

				/** @override */
				getValue: function() {
					return this.node.innerHTML;
				},

				/** @override */
				setValue: function(value) {
					this.node.innerHTML = value;
				},

				/** @override */
				show: function() {
					this.node.style.display = "";
				},

				hide: function() {
					this.node.style.display = "none";
				},

				formatTime: function (hours) {
						var minutes = "000000" + (hours - Math.floor(hours)) * 60
					return Math.floor(hours) + ":" + minutes.substr(minutes.length-2);
				},

				// gather data from control widgets
				eventDispatcher: function(event_from_widget, source, self) {
					switch(event_from_widget) {
						case("widget-clone"): {
							self.registerEvents(source.node, "add-time-slider", ["widget-clone"]);
							self.node.addEventListener("add-time-slider", L.bind(function(ev) { 
								self.show()
								self.setValue(self.getValue() + "<span style='display: block;' data-source='" + source.idref + "'>" + source.getValue() + " " + source.idref + "</span>")
							}, self));
							break;
						}
						case("widget-remove"): {
							self.registerEvents(source.node, "remove-time-slider", ["widget-remove"]);
							self.node.addEventListener("remove-time-slider", L.bind(function(ev) { 
								self.show()
								var whatToDel = self.node.querySelector("[data-source='" + source.idref + "']")
								if(whatToDel) self.node.removeChild(whatToDel)
								if(self.node.children.length <= 1) self.hide()
							}, self));
						}
						default: {}
					}
				}
			});
			ui["NotesBanner"] = UINotesBanner;
		});
	});
});
//]]>
</script>