<%
	local config = "settings"
	local uci = require "luci.model.uci".cursor()
	local util = require "luci.util"
	local fs = require "nixio.fs"

	-- population of "Select event" widget
	local possible_events = {}
	local pos_ev = uci:get_list(config, "globals", "possible_event")
	util.dumptable(pos_ev)
	for i=1, #pos_ev do
		local pair = util.split(pos_ev[i], ".")
		possible_events[pair[1]] = pair[2]
	end

	-- population of "Select send method" widget
	local possible_sendmethods = {}
	local pos_smeth = uci:get_list(config, "globals", "possible_sendmethod")
	util.dumptable(pos_smeth)
	for i=1, #pos_smeth do
		local pair = util.split(pos_smeth[i], ".")
		possible_sendmethods[pair[1]] = pair[2]
	end


	-- make alerts table
	local alerts = {}
	function withEveryAlert(a)
		if (a[".name"] ~= "alert_prototype") then
			alerts[a[".name"]] = a

			-- make list of days as string
			local days = ""
			for j=1,#a.day do
				days = days .. util.split(a.day[j], ".")[2] .. ", "
			end
			alerts[a[".name"]]["day"] = days

			-- make template params as table
			local params = {}
			for j=1, #a.template_param do
				params[a.template_param[j]] = a.template_param[j]
			end
			alerts[a[".name"]]["template_param"] = params
		end
		util.dumptable(alerts)
	end
	uci:foreach(config, "alert", withEveryAlert)

	-- Get list of default templates
	local tmpl_path = uci:get(config, "globals", "default_template_path")
	local tmpls = fs.dir(tmpl_path)
	local default_templates = {} -- all default templates will be loaded here from files

	for filename in tmpls do
		-- get event id and sendmethod id by parsing filename
		-- e.g.: "error.sms" - event_id==error, sendmethod_id==sms
		local s, e = filename:find("%.")
		local event_id = filename:sub(1, s-1)
		local sendmethod_id = filename:sub(s+1, filename:len())

		if(type(default_templates[event_id]) ~= "table") then
			default_templates[event_id] = {}
		end
		default_templates[event_id][sendmethod_id] = fs.readfile(tmpl_path .. "/" .. filename)
	end


%>

<script
  src="https://code.jquery.com/jquery-3.5.1.min.js"
  integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
  crossorigin="anonymous"></script>

<script src="/luci-static/resources/jquery.highlight-within-textarea.js" type="text/javascript" charset="utf-8" async defer></script>

<script type="text/javascript" src="<%=resource%>/rSlider.js"></script>

<script type="text/javascript">
//<![CDATA[

function edit_alert(btn) {
	var alert_id = btn.getAttribute("data-alertid")
	var alerts = <%=util.serialize_json(alerts) %>
	var theAlert = alerts[alert_id]
	var possibleEvents = <%=util.serialize_json(possible_events) %>
	var possibleSendmethods = <%=util.serialize_json(possible_sendmethods) %>
	

	L.require("session").then(function(session){
		L.require("ui").then(function(ui){
			L.require("uci").then(function(uci) {
				uci.load("settings").then(function(out){

					var active = new ui.Checkbox(theAlert["enabled"]);

					var event = new ui.Dropdown("error", possibleEvents, { optional: false });
					var event_widget = event.render()


					var alert_method = new ui.Dropdown("syslog", possibleSendmethods, { optional: false });
					var alert_method_widget = alert_method.render();


					var tmpl_vars = new ui.Dropdown("0", theAlert["template_param"]);
					var tmpl_vars_widget = tmpl_vars.render()

					// var protected_intervals = ui.tabs()
					// protected_intervals.initTabGroup(document.querySelector("#protected_time").childNodes())
					function makeTabs() {
						var tabs = document.querySelector("#protected_time").childNodes
						ui.tabs.initTabGroup(tabs)

						var slider3 = new rSlider({
						    target: '#slider3',
						    values: {min: 0, max: 24},
						    step: 0.25,
						    range: true,
						    set: [8, 18],
						    scale: true,
						    labels: true,
						    onChange: function (vals) {
						        console.log(vals);
						    }
						});
					}
					setTimeout(makeTabs, 200)
					

					// Генерируем JS_объект defaultTemplates
					var defaultTemplates = <%=util.serialize_json(default_templates) %>

					// store templates in local storage
					session.setLocalData("default-alert-templates", defaultTemplates)
					session.setLocalData("custom-alert-templates", defaultTemplates)

					var alert_template = new ui.TextAreaHighlighted(defaultTemplates[event.getValue()][alert_method.getValue()], { 
						optional: true,
						datatype: "rangelength(0,256)",
						readonly: true,
						highlights: Object.keys(theAlert["template_param"]) });
					var alert_template_widget = alert_template.render()

					var key = ""; // catch % key pressed
					alert_template_widget.addEventListener('keyup', (event) => {
						key = event.key || "Escape";
						if(key == "Escape") {
							tmpl_vars.closeAllDropdowns()
							tmpl_vars_widget.parentNode.style.visibility = "hidden";
						} else {
							// save custom template to local storage
							saveTmplCustom(alert_template.getValue())
						}
					});

					// enable Custom / Default switcher
					function allowTmplEdit() {
						document.querySelector("[name='allow-tmpl-edit']").style.display = "none"
						document.querySelector("[name='tmpl-custom']").style.display = "block"
						document.querySelector("[name='tmpl-default']").style.display = "block"
						loadTmplCustom()
					}
					// load default templae to textarea
					function loadTmplDefault(eventId=undefined, channelId=undefined) {
						var tmpls = session.getLocalData("custom-alert-templates")
						var evnt_id = eventId || event.getValue() || undefined
						var chnl_id = channelId || alert_method.getValue() || undefined
						alert_template.getTextArea().readOnly = true;

						if(evnt_id && chnl_id) {
							var storedTmpls = session.getLocalData("default-alert-templates")			
							alert_template.setValue(storedTmpls[evnt_id][chnl_id])
						} else {
							alert_template.setValue("")
						}

						document.querySelector("[name='tmpl-custom']").style.backgroundImage = "none";
						document.querySelector("[name='tmpl-default']").style.backgroundImage = "url(/luci-static/resources/icons/check-grey.png)";
					}

					// load custom template to textarea
					function loadTmplCustom(eventId=undefined, channelId=undefined) {
						var tmpls = session.getLocalData("custom-alert-templates")
						var evnt_id = eventId || event.getValue() || undefined
						var chnl_id = channelId || alert_method.getValue() || undefined
						alert_template.getTextArea().readOnly = false;

						if(evnt_id && chnl_id) {
							var storedTmpls = session.getLocalData("custom-alert-templates")
							alert_template.setValue(storedTmpls[evnt_id][chnl_id] + "\n")
						} else {
							alert_template.setValue("")
						}
						alert_template.getTextArea().focus()

						document.querySelector("[name='tmpl-default']").style.backgroundImage = "none";
						document.querySelector("[name='tmpl-custom']").style.backgroundImage = "url(/luci-static/resources/icons/check.png)";
					}

					function saveTmplCustom(tmpltext, eventId=undefined, channelId=undefined) {
						var tmpls = session.getLocalData("custom-alert-templates")
						var evnt_id = eventId || event.getValue() || "1"
						var chnl_id = channelId || alert_method.getValue() || "sms"
						tmpls[evnt_id][chnl_id] = tmpltext
						session.setLocalData("custom-alert-templates", tmpls)
					}


					var already = false; // avoid fire event twice
					function insertTmplVar() {
						return	L.bind(function(ev) {
							if(!already) {
								already = true;
								var tVar = tmpl_vars.getValue() || false
								var pos = alert_template.getTextArea().selectionEnd;
								if (pos >= 1 && tVar) {
									var oldVal = alert_template.getValue();
									var newVal = oldVal.substr(0, pos-1) + " " + tmpl_vars.getValue() + " " + oldVal.substr(pos);
									alert_template.setValue(newVal);
									// save custom template to local storage
									saveTmplCustom(newVal)
									alert_template.getTextArea().focus();
								}
								tmpl_vars.setValue("")
								tmpl_vars_widget.parentNode.style.visibility = "hidden";
							}
						})
					}
					
					alert_template.registerEvents(tmpl_vars_widget, "tmpl-var-selected", ["cbi-dropdown-change", "keyup"]);
					alert_template_widget.addEventListener('tmpl-var-selected', insertTmplVar(), false);

					alert_template.registerEvents(event_widget, "event-selected", ["cbi-dropdown-change"]);
					alert_template_widget.addEventListener('event-selected', L.bind(function(ev) { loadTmplDefault() }), false);

					alert_template.registerEvents(alert_method_widget, "alert-method-selected", ["cbi-dropdown-change"]);
					alert_template_widget.addEventListener('alert-method-selected', L.bind(function(ev) { loadTmplDefault() }), false);

					tmpl_vars.registerEvents(alert_template_widget, "on-speckey-pressed", ["keyup"])
					tmpl_vars_widget.addEventListener('on-speckey-pressed', L.bind(function(ev) {
						already = false;
						if(key == "Escape") {
							tmpl_vars.closeAllDropdowns()
							ev.target.parentNode.style.visibility = "hidden";
						} else if(key=="%") {
							var coordinates = getCaretCoordinates(alert_template.getTextArea(), alert_template.getTextArea().selectionEnd);
							var scrollTextArea_Y = alert_template.getTextArea().scrollTop;
							ev.target.parentNode.style.left = - 10 + coordinates.left + "px";
							ev.target.parentNode.style.top = 15 + coordinates.top - scrollTextArea_Y + "px";
							ev.target.parentNode.style.visibility = "visible";
							key = "";
						} else if(key != "Shift") {
							ev.target.parentNode.style.visibility = "hidden";
						}
					}));
					

					var conditions = {
						defaultLogics: {
							and: "AND",
							or: "OR"
						},

						logics: ["or"],
						records: [
							{ obj: "%_relayid_%", param: "%_timeout_%", operator: ">", val: 900 },
							{ obj: "%_serverid_%", param: "%_timeout_%", operator: ">", val: 60 },
						],
						dropDownData: function(key) {
							var out = {}
							this.records.forEach(function(item, i, arr) {
								out[item[key]] = item[key]
							})
							return out;
						}
					}

					var cond_object = new ui.Dropdown(0, conditions.dropDownData("obj"), { optional: false });
					var cond_param = new ui.Dropdown(0, conditions.dropDownData("param"), { optional: false });
					var cond_operator = new ui.Dropdown(0, conditions.dropDownData("operator"), { optional: false });
					var cond_val = new ui.Textfield("900", { optional: false });

					var cond_logic = new ui.Dropdown(0, conditions.defaultLogics, { optional: false });
					var cond_object2 = new ui.Dropdown(0, conditions.dropDownData("obj"), { optional: false });
					var cond_param2 = new ui.Dropdown(0, conditions.dropDownData("param"), { optional: false });
					var cond_operator2 = new ui.Dropdown(0, conditions.dropDownData("operator"), { optional: false });
					var cond_val2 = new ui.Textfield("60", { optional: false });

					var cond_logic2 = new ui.Dropdown(0, conditions.defaultLogics, { optional: false });
					var cond_object3 = new ui.Dropdown(0, conditions.dropDownData("obj"), { optional: false });
					var cond_param3 = new ui.Dropdown(0, conditions.dropDownData("param"), { optional: false });
					var cond_operator3 = new ui.Dropdown(0, conditions.dropDownData("operator"), { optional: false });
					var cond_val3 = new ui.Textfield("15", { optional: false });

					var add_daytime = new ui.Checkbox(0)
					var add_daytime_widget = add_daytime.render()

					var weekdays = new ui.DynamicList(["Пн","Вт","Ср","Чт","Пт"], {
						"Пн": "Пн",
						"Вт": "Вт",
						"Ср": "Ср",
						"Чт": "Чт",
						"Пт": "Пт",
						"Сб": "Сб",
						"Вс": "Вс"
					}, { optional: false, multiple: true, display_items: 7, create: false, readonly: true, sort: ["Пн","Вт","Ср","Чт","Пт","Сб","Вс"] });

					var hours = {
						"08:00": "08:00",
						"09:00": "09:00",
						"10:00": "10:00",
						"11:00": "11:00",
						"12:00": "12:00",
						"13:00": "13:00",
						"14:00": "14:00",
						"15:00": "15:00",
						"16:00": "16:00",
						"17:00": "17:00",
						"18:00": "18:00",
						"19:00": "19:00",
						"20:00": "20:00",
						"21:00": "21:00",
						"22:00": "22:00",
						"23:00": "23:00",
						"00:00": "00:00",
						"01:00": "01:00",
						"02:00": "02:00",
						"03:00": "03:00",
						"04:00": "04:00",
						"05:00": "05:00",
						"06:00": "06:00",
						"07:00": "07:00"
					}
					var startTime = new ui.Dropdown("08:00", hours)
					var endTime = new ui.Dropdown("18:00", hours)





					// Open modal
					L.showModal('Настройка автоматического уведомления', [
						E('div', { class: 'cbi-map alert-setting', 'style': "margin-top: 1em;" }, [
							E('div', { class: 'cbi-map-section' }, [
								E('div', { class: 'cbi-map-section-node' }, [
									E('div', { class: 'cbi-value' }, [
										E('label', { 'class': 'cbi-value-title', 'style': 'padding-right:2rem;' }, _('Активно') + ":"),
										E('div', { class: 'cbi-value-field' }, [
											active.render()
										])
									]),
									E('div', { class: 'cbi-value' }, [
										E('label', { 'class': 'cbi-value-title', 'style': 'margin-top: -10px; padding-right:2rem;' }, _('Отправить уведомлении если') + ":"),
										E('div', { class: 'cbi-value-field', style: 'width: auto;' }, [
											event_widget,
											"        используя: ",
											alert_method_widget,
										]),
									]),

									E('div', { class: 'cbi-value' }, [
										E('label', { 'class': 'cbi-value-title', 'style': 'padding-right:2rem;' }, [
											_('Шаблон уведомления') + ":",
											E('br'),
											E('p', {style: 'font-style: italic; font-size: 0.8em; line-height: 120%; margin-top:0.5em;'}, _('Используйте символ % для выбора параметра из списка.')),
										]),
										E('div', { class: 'cbi-value-field message-template' }, [
											alert_template_widget,
											E('a', { 
													name: 'allow-tmpl-edit',
													style: 'text-decoration: underline; float: right; cursor: pointer;',
													click: ui.createHandlerFn(this, function() {
														return allowTmplEdit();
													})
												}, _('Редактировать шаблон')),
											E('a', { 
													name: 'tmpl-default',
													style: 'color: grey;',
													click: ui.createHandlerFn(this, function() {
														return loadTmplDefault();
													})
												}, _('Default')),
												E('a', { 
													name: 'tmpl-custom',
													style: '',
													click: ui.createHandlerFn(this, function() {
														return loadTmplCustom();
													})
												}, _('Custom')),

										]),
										/* Виджет для выбра и подстановки парамтеров в шаблон */
										E('div', { class: '', style: 'width: auto; position: absolute; left: 50px; visibility: hidden;' }, [
											tmpl_vars_widget
										]),
									]),
									E('div', { class: 'cbi-value alert-condition' }, [
										E('label', { 'class': 'cbi-value-title', 'style': 'padding-right:2rem;' }, _('Условия отправки') + ":"),
										E('div', { class: 'cbi-value-field', style: 'margin-top: -12px; width: auto;' }, [
											E('div', {class: 'first-condition-row'}, [
												E('p', {class: 'small-lable'}, "Логика"),
												cond_logic.render(),
											]),
											E('div', {class: 'first-condition-row'}, [
												E('p', {class: 'small-lable'}, "Объект"),
												cond_object.render(),
											]),
											E('div', {class: 'first-condition-row'}, [
												E('p', {class: 'small-lable'}, "Атрибут"),
												cond_param.render(),
											]),
											E('div', {class: 'first-condition-row'}, [
												E('p', {class: 'small-lable'}, "Оператор"),
												cond_operator.render(),
											]),
											
											E('div', {class: 'first-condition-row'}, [
												E('p', {class: 'small-lable'}, "Значение"),
												cond_val.render(),
											]),
											E('a', { 
												style: 'margin-left: 10px; text-decoration: underline; cursor: pointer;',
												click: ui.createHandlerFn(this, function() {
													return allowTmplEdit();
												})
											}, _('Удалить')),
										]),
										E('div', { class: 'cbi-value-field', style: 'width: auto;' }, [
											cond_logic.render(),
											cond_object2.render(),
											cond_param2.render(),
											cond_operator2.render(),
											E('div', {style: 'display: inline-block; min-width: 50px; width: 50px;'}, [
												cond_val2.render(),
											]),
											E('a', { 
												style: 'margin-left: 10px; text-decoration: underline; cursor: pointer;',
												click: ui.createHandlerFn(this, function() {
													return allowTmplEdit();
												})
											}, _('Удалить')),
										]),
										E('div', { class: 'cbi-value-field', style: 'width: auto;' }, [
											cond_logic2.render(),
											cond_object3.render(),
											cond_param3.render(),
											cond_operator3.render(),
											E('div', {style: 'display: inline-block; min-width: 50px; width: 50px;'}, [
												cond_val3.render(),
											]),
											E('a', { 
												style: 'margin-left: 10px; text-decoration: underline; cursor: pointer;',
												click: ui.createHandlerFn(this, function() {
													return allowTmplEdit();
												})
											}, _('Удалить')),
										]),
										E('div', { class: 'cbi-value-field', style: 'width: auto;' }, [
											E('a', { 
												style: 'text-decoration: underline; cursor: pointer;',
												click: ui.createHandlerFn(this, function() {
													return allowTmplEdit();
												})
											}, _('Добавить условие')),
										]),
									]),
									E('div', { class: 'cbi-value' }, [
										E('label', { 'class': 'cbi-value-title', 'style': 'padding-right:2rem;' }, [
											_('Запретить отправку') + ":",
											E('br'),
											E('p', {style: 'font-style: italic; font-size: 0.8em; line-height: 120%; margin-top:0.5em;'}, _('Укажите интервалы времени когда запрещено отправлять данное уведомление.')
											)
										]),
										E('div', { class: 'cbi-value-field', style: 'width: 75%' }, [
											E('div', { id: "protected_time" }, [
												E('div', { class: "cbi-tab-descr", "data-tab": "daytime", "data-tab-title": "Дневной интервал", "data-tab-active": true }, [
													E('p', { style: "padding: 0.4em 0 3em 0"}, "Укажите в какой промежуток времени запретить отправку уведомлений:"),
													E('div', {class: "container"}, [
														E('div', {class: "slider-container"}, [
															E('input', {type: "text", id: "slider3", class: "slider"})
														])
													])
												]),
												E('div', { class: "cbi-tab-descr", "data-tab": "weekdays", "data-tab-title": "Дни недели" }, [
													E('p', {}, "Дневной интервал")
												]),
												E('div', { class: "cbi-tab-descr", "data-tab": "monthdays", "data-tab-title": "Дни месяца" }, [
													E('p', {}, "Дневной интервал")
												])
											])
										])
									]),
								])
							])
						]),
						E('div', { class: 'cbi-value-field', style: 'margin-top: 30px; margin-bottom: 30px;' }, [
							E('div', { class: 'btn', click: L.hideModal }, _('Закрыть')),
							' ',
							E('div', { class: 'btn success', "name": "apply",
								'click': ui.createHandlerFn(this, function() {
										return handleSaveAlert();
									
								})
							}, _('Сохранить'))
						])
					]);
				})	
			})
		})	
	})
}
function handleSaveAlert(handleSaveAlert) {
	// send_action("edit", relay_id, { "relay_data": relay_data, "globals_data": globals_data } )
}
//]]>
</script>