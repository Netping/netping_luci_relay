<%
	local config = "settings"
	local uci = require "luci.model.uci".cursor()
	local util = require "luci.util"
	local fs = require "nixio.fs"

	-- population of "Select event" widget
	local possible_events = {}
	local pos_ev = uci:get_list(config, "globals", "possible_event")
	util.dumptable(pos_ev)
	for i=1, #pos_ev do
		local pair = util.split(pos_ev[i], ".")
		possible_events[pair[1]] = pair[2]
	end

	-- population of "Select send method" widget
	local possible_sendmethods = {}
	local pos_smeth = uci:get_list(config, "globals", "possible_sendmethod")
	util.dumptable(pos_smeth)
	for i=1, #pos_smeth do
		local pair = util.split(pos_smeth[i], ".")
		possible_sendmethods[pair[1]] = pair[2]
	end


	-- make alerts table
	local alerts = {}
	function withEveryAlert(a)
		if (a[".name"] ~= "alert_prototype") then
			alerts[a[".name"]] = a

			-- make list of days as string
			local days = ""
			for j=1,#a.day do
				days = days .. util.split(a.day[j], ".")[2] .. ", "
			end
			alerts[a[".name"]]["day"] = days

			-- make template params as table
			local params = {}
			for j=1, #a.template_param do
				params[a.template_param[j]] = a.template_param[j]
			end
			alerts[a[".name"]]["template_param"] = params
		end
		util.dumptable(alerts)
	end
	uci:foreach(config, "alert", withEveryAlert)

	


%>
<%+netping_luci_relay/datepicker.material.css%>
<%+netping_luci_relay/translit.js%>

<script
  src="https://code.jquery.com/jquery-3.5.1.min.js"
  integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
  crossorigin="anonymous"></script>

<script src="/luci-static/resources/jquery.highlight-within-textarea.js" type="text/javascript" charset="utf-8" async defer></script>

<!--
<script type="text/javascript" src="<%=resource%>/rSlider.js"></script>
//-->
<script type="text/javascript" src="<%=resource%>/datepicker/datepicker.js"></script>

<script type="text/javascript">
//<![CDATA[

function edit_alert(btn) {
	var alert_id = btn.getAttribute("data-alertid")
	var alerts = <%=util.serialize_json(alerts) %>
	var theAlert = alerts[alert_id]
	var possibleEvents = <%=util.serialize_json(possible_events) %>
	var possibleSendmethods = <%=util.serialize_json(possible_sendmethods) %>
	

	L.require("session").then(function(session){
		L.require("dom").then(function(dom){
			L.require("ui").then(function(ui){
				L.require("uci").then(function(uci) {
					uci.load("settings").then(function(out){

						window.EventBus = new ui.EventBus()
						var EventBus_widget = window.EventBus.render()

						var active = new ui.Checkbox(theAlert["enabled"]);


<%+netping_luci_relay/_modal_alert_section_templete.js%>
<%+netping_luci_relay/_modal_alert_section_condition.js%>


/**************** Modal section ******************/
/* Date/Time intervals protected fom sending alers
/*************************************************/

<%+netping_luci_relay/_modal_alert_section_intervals.js%>

						ui.tabs.addTab = function(interval) {
							var rSlider_widgets = [];
							var tf = window.EventBus.timeframe
							var group = document.querySelector(".protected-time .protected-time-panes"),
								menu = document.querySelector(".protected-time .cbi-tabmenu"),
							    groupId = +group.getAttribute('data-tab-group');
							var time_interval = typeof(interval) == "string" ? { "title": interval } : interval
							var everyPeriod_widget = makeEveryPeriod(tf[slug(interval)].repeat_mode)
							

							time_interval["id"] = slug(time_interval["title"])
							group.setAttribute('data-initialized', false);

							// make array of timerange widgets
							tf[slug(interval)].timeranges.forEach(L.bind(function(t) {
								var trange = makeSliderWidget(time_interval["id"], time_interval["title"], [parseFloat(t.split(",")[0]), parseFloat(t.split(",")[1])])
								rSlider_widgets.push(trange)
							}))

							var pane = E('div', { "data-tab": time_interval["id"], "data-tab-title": time_interval["title"], "data-tab-active": "false"}, [
								E('p', { style: "padding: 0.4em 0 3em 0"}, "Укажите в какой промежуток времени запретить отправку уведомлений:"),
								E('table', {border: "1", style: "width: 100%"}, [
									E('tr', {}, [
										E('td', {width: "45%", valign: "top"}, [
											E('input', {type: "hidden", id: "ranged_" + time_interval["id"]}),
											everyPeriod_widget
										]),
										E('td', {width: "55%", valign: "top"}, rSlider_widgets)
									])
								])
							])

							// first tab creation
							if(group.childNodes.length == 0) {
								dom.append(group, pane)	
								ui.tabs.initTabGroup(group.childNodes)

								makeDatePicker(time_interval["id"], time_interval["title"], tf[slug(interval)].dates)

								group.setAttribute('data-initialized', true);
								return
							}

							// Avoid duplicates of tab
							for(var i=0; i < group.childNodes.length; i++) {
								if(group.childNodes[i].getAttribute("data-tab-title") == interval) {
									return
								}
							}


							var name = pane.getAttribute('data-tab'),
							    title = pane.getAttribute('data-tab-title'),
							    active = false;


							menu.appendChild(E('li', {
								'style': this.isEmptyPane(pane) ? 'display:none' : null,
								'class': active ? 'cbi-tab' : 'cbi-tab-disabled',
								'data-tab': name
							}, E('a', {
								'href': '#',
								'click': this.switchTab.bind(this)
							}, title)));

							group.setAttribute('data-initialized', true);
							group.childNodes.forEach(L.bind(function(node) {
								node.setAttribute('data-tab-active', 'false');	
							}))
							group.appendChild(pane);
							group.firstChild.setAttribute('data-tab-active', 'true');
/*
							pane.dispatchEvent(new CustomEvent('cbi-tab-active', {
								detail: { tab: pane.getAttribute('data-tab') }
							}));
*/							

							makeDatePicker(time_interval["id"], time_interval["title"], tf[slug(interval)].dates)

						};


						ui.tabs.removeTabs = function() {
							var group = document.querySelector(".protected-time .protected-time-panes"),
								menu = document.querySelector(".protected-time .cbi-tabmenu"),
							    groupId = +group.getAttribute('data-tab-group');

							if(group) {
								while(group.firstChild) {
								   	group.removeChild(group.firstChild)
								}
							}
							if(menu) {
								while(menu.firstChild) {
								   	menu.removeChild(menu.firstChild)
								}
								menu.remove()
							}
						};

						ui.tabs.showTab = function(tab_title) {
							var group = document.querySelector(".protected-time .protected-time-panes"),
								menu = document.querySelector(".protected-time .cbi-tabmenu");
								if(!menu || !group) return;
								var tab_to_show = group.querySelector("[data-tab='" + slug(tab_title) + "'");
								var menu_to_show = menu.querySelector("[data-tab='" + slug(tab_title) + "'");
							if(tab_to_show && menu_to_show) {
								tab_to_show.style.display = "block"
								menu_to_show.style.display = "block"

								group.childNodes.forEach(L.bind(function(node) {
									node.setAttribute('data-tab-active', 'false');	
								}))
								tab_to_show.setAttribute('data-tab-active', 'true');

								menu.childNodes.forEach(L.bind(function(node) {
									node.setAttribute('class', 'cbi-tab-disabled');	
								}))
								menu_to_show.setAttribute('class', 'cbi-tab');	

								// window.EventBus.timeframe[slug(tab_title)]["enabled"] = true
							}
						};

						ui.tabs.hideTab = function(tab_title) {
							var group = document.querySelector(".protected-time .protected-time-panes"),
								menu = document.querySelector(".protected-time .cbi-tabmenu");
								if(!menu || !group) return;
								var tab_to_hide = group.querySelector("[data-tab='" + slug(tab_title) + "'");
								var menu_to_hide = menu.querySelector("[data-tab='" + slug(tab_title) + "'");
							if(tab_to_hide && menu_to_hide) {
								tab_to_hide.style.display = "none"
								menu_to_hide.style.display = "none"

								menu_to_hide.setAttribute('class', 'cbi-tab-disabled');
								tab_to_hide.setAttribute('data-tab-active', 'false');					

								// window.EventBus.timeframe[slug(tab_title)]["enabled"] = false
							}
						}

/******************************/

						// Open modal
						L.showModal('Настройка автоматического уведомления', [
							E('div', { class: 'cbi-map alert-setting', 'style': "margin-top: 1em;" }, [
								E('div', { class: 'cbi-map-section' }, [
									E('div', { class: 'cbi-map-section-node' }, [
										E('div', { class: 'cbi-value' }, [
											E('label', { 'class': 'cbi-value-title', 'style': 'padding-right:2rem;' }, _('Активно') + ":"),
											E('div', { class: 'cbi-value-field' }, [
												active.render()
											])
										]),
										E('div', { class: 'cbi-value' }, [
											E('label', { 'class': 'cbi-value-title', 'style': 'margin-top: -10px; padding-right:2rem;' }, _('Отправить уведомлении если') + ":"),
											E('div', { class: 'cbi-value-field', style: 'width: auto;' }, [
												event_widget,
												"        используя: ",
												alert_method_widget,
											]),
										]),

										E('div', { class: 'cbi-value' }, [
											E('label', { 'class': 'cbi-value-title', 'style': 'padding-right:2rem;' }, [
												_('Шаблон уведомления') + ":",
												E('br'),
												E('p', {style: 'font-style: italic; font-size: 0.8em; line-height: 120%; margin-top:0.5em;'}, _('Используйте символ % для выбора параметра из списка.')),
											]),
											E('div', { class: 'cbi-value-field message-template' }, [
												alert_template_widget,
												E('a', { 
														name: 'allow-tmpl-edit',
														style: 'text-decoration: underline; float: right; cursor: pointer;',
														click: ui.createHandlerFn(this, function() {
															return allowTmplEdit();
														})
													}, _('Редактировать шаблон')),
												E('a', { 
														name: 'tmpl-default',
														style: 'color: grey;',
														click: ui.createHandlerFn(this, function() {
															return loadTmplDefault();
														})
													}, _('Default')),
													E('a', { 
														name: 'tmpl-custom',
														style: '',
														click: ui.createHandlerFn(this, function() {
															return loadTmplCustom();
														})
													}, _('Custom')),

											]),
											/* Виджет для выбра и подстановки парамтеров в шаблон */
											E('div', { class: '', style: 'width: auto; position: absolute; left: 50px; visibility: hidden;' }, [
												tmpl_vars_widget
											]),
										]),
										
										E('div', { class: 'cbi-value alert-condition' }, [
											E('label', { 'class': 'cbi-value-title', 'style': 'padding-right:2rem;' }, _('Условия отправки') + ":"),
											E('div', { class: 'cbi-value-field' }, [
												E('table', { }, [
													E('tr', {}, [
														E('th', {}, _("Логика")),
														E('th', {}, _("Скобка")),
														E('th', {}, _("Объект")),
														E('th', {}, _("Атрибут")),
														E('th', {}, _("Оператор")),
														E('th', {}, _("Значение")),
														E('th', {}, _("Скобка")),
														E('th', {}, _(""))
													]),
													E('tr', {}, [
														E('td', {}, ""),
														E('td', {}, left_parenthesis.render()),
														E('td', {}, cond_object.render()),
														E('td', {}, cond_param.render()),
														E('td', {}, cond_operator.render()),
														E('td', {}, cond_val.render()),
														E('td', {}, right_parenthesis_disabled.render()),
														E('td', {}, [
															E('a', { 
																style: 'color: grey; margin-left: 10px; text-decoration: underline; cursor: pointer;',
																click: ui.createHandlerFn(this, function() {
																	//return allowTmplEdit();
																	return alert("Under construction..");
																})
															}, _('Удалить')),
														])
													]),
													E('tr', {}, [
														E('td', {}, cond_logic.render()),
														E('td', {}, left_parenthesis_disabled.render()),
														E('td', {}, cond_object.render()),
														E('td', {}, cond_param.render()),
														E('td', {}, cond_operator.render()),
														E('td', {}, cond_val.render()),
														E('td', {}, right_parenthesis.render()),
														E('td', {}, [
															E('a', { 
																style: 'color: grey; margin-left: 10px; text-decoration: underline; cursor: pointer;',
																click: ui.createHandlerFn(this, function() {
																	//return allowTmplEdit();
																	return alert("Under construction..");
																})
															}, _('Удалить')),
														])
													]),
													E('tr', {}, [
														E('td', {}, cond_logic.render()),
														E('td', {}, left_parenthesis_disabled.render()),
														E('td', {}, cond_object.render()),
														E('td', {}, cond_param.render()),
														E('td', {}, cond_operator.render()),
														E('td', {}, cond_val.render()),
														E('td', {}, right_parenthesis_disabled.render()),
														E('td', {}, [
															E('a', { 
																style: 'color: grey; margin-left: 10px; text-decoration: underline; cursor: pointer;',
																click: ui.createHandlerFn(this, function() {
																	return alert("Under construction..");
																	// return allowTmplEdit();
																})
															}, _('Удалить')),
														])
													])
												]),
												E('a', { 
													style: 'color: grey; text-decoration: underline; cursor: pointer; display: block; padding-top: 10px;',
													click: ui.createHandlerFn(this, function() {
														return alert("Under construction..");
														// return allowTmplEdit();
													})
												}, _('Добавить условие')),
												conditionNotes_widget
											]),
										]),

										E('div', { class: 'cbi-value' }, [
											E('label', { 'class': 'cbi-value-title', 'style': 'padding-right:2rem;' }, [
												_('Запретить отправку') + ":",
												E('br'),
												E('p', {style: 'font-style: italic; font-size: 0.8em; line-height: 120%; margin-top:0.5em;'}, _('Укажите интервалы времени когда запрещено отправлять данное уведомление.')
												)
											]),
											E('div', { class: 'cbi-value-field protected-time', style: 'width: 75%' }, [
												protected_intervals_widget,
												E('div', { class: "protected-time-panes cbi-section-node cbi-section-node-tabbed" }, [
													// place panes here
												]),
												intervalNotes_widget
											])
										]),
									])
								])
							]),
							E('div', { class: 'cbi-value-field', style: 'margin-top: 30px; margin-bottom: 30px;' }, [
								E('div', { class: 'btn', click: L.hideModal }, _('Закрыть')),
								' ',
								E('div', { class: 'btn success', "name": "apply",
									'click': L.hideModal 
									/*ui.createHandlerFn(this, function() {
											return handleSaveAlert();
										
									})*/
								}, _('Сохранить'))
							])
						]);
					})	
				})
			})
		})
	})
}
function handleSaveAlert(handleSaveAlert) {
	// send_action("edit", relay_id, { "relay_data": relay_data, "globals_data": globals_data } )
}
//]]>
</script>