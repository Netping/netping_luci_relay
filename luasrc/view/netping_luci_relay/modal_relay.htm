<%
	local config = "netping_luci_relay"
	local uci = require "luci.model.uci".cursor()
	local util = require "luci.util"
	local log = require "luci.model.netping.log"
	local globals = uci:get_all(config, "globals")

%>
<%
	local adapter_list = require "luci.model.netping.relay.adapter_list"
	local dropdown, dropdown_js, name = {}, '', ''
	for adptype, adapter in pairs(adapter_list) do
		print(adapter():render("cssfile"))
		print(adapter():render("validator"))
		print(adapter():render("widgetfile"))
		dropdown[#dropdown+1] = string.format('"%s": "%s"', adapter():getLabel(), adapter():getLabel())
	end
	dropdown_js = "{" .. table.concat(dropdown, ", ") .. "}"

	
%>
<%+netping_luci_relay/ui_widget/UIAdapterEmpty.js%>
<%+netping_luci_relay/ui_override/DropdownProto.js%>

<script type="text/javascript">
//<![CDATA[

// gets a record from uci like <settings.globals.proto='first.Протокол 1' 'second.Протокол 2' 'third.Протокол 3'>
// returns object like {"first": "Протокол 1", "second": "Протокол 2", "third": "Протокол 3"}
function widgetPopulation(uci_section, uci) {
	var section = uci.get("<%=config%>", uci_section) || [];
	return function(uci_option) {
		var population = {}
		if (section[uci_option]) {
			section[uci_option].forEach(function(p) {
				population[p.split(".")[0]] = p.split(".")[1];
			})
		}
		return population
	}
}

function edit_relay(btn) {
	var globals_data = {}
	var relay_id = btn.getAttribute("data-relay") || null;
	L.require("ui").then(function(ui){
		L.require("uci").then(function(uci) {
			uci.load("<%=config%>").then(function(out){
				globals_data = uci.get("<%=config%>", "globals");
				var globals = widgetPopulation("globals", uci),
					relay_data = uci.get("<%=config%>", relay_id),
					embedded = relay_data["embedded"] == '1' ? true : false,
					adapter_data = {};

				var proto = new ui.DropdownProto(relay_data["proto"], <%= dropdown_js %>, { 
					disabled: embedded,
					sort: true
				});

				var state_on_term = new ui.Textfield(globals("state")["1"], { 
					optional: false,
					datatype: "rangelength(2,64)" });

				var state_off_term = new ui.Textfield(globals("state")["0"], { 
					optional: false,
					datatype: "rangelength(2,64)" });

				// Make dropdown for settings.relay.number = 1..16
				var maxn = globals_data["relay_max_number"] || '0'
				var rnums = {1: 1}
				for (var i=1; i <= parseInt(maxn, 10); i++) {
					rnums[i] = i
				}
				var relay_number = new ui.Dropdown(relay_data["number"], rnums, { disabled: embedded, sort: false });


				// ADAPTER INITS
				<%
					for adptype, adapter in pairs(adapter_list) do
						print(adapter():render("jsinit"))
					end
				%>
				var empty_adapter = new ui.AdapterEmpty()


				var restart_time = new ui.TextFieldStyled(relay_data["restart_time"], { 
						maxlength: 3, 
						datatype: "uinteger",
						htmlStyle: "width: 70px"	
					});

				var memo = new ui.Textfield(relay_data["name"], {
					datatype: "rangelength(4,128)" });

				var emptyProto = new ui.AdapterEmpty()


				L.showModal('Редактировать реле', [
					E('div', { class: 'cbi-map' }, [
						E('div', { class: 'cbi-map-section' }, [
							E('div', { class: 'cbi-map-section-node' }, [
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title memo-edit' }, _('Памятка') + ":"),
									E('div', { class: 'cbi-value-field memo-edit' }, [
										memo.render()
									])
								]),
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title'}, _('Расшифровка состояния') + ":"),
									E('div', { class: 'cbi-value-field' }, [
										E('table', {class: 'cbi-2cols'}, [
											E('tr', [E('td', [state_on_term.render()]), E('td', _(' - соответствует состоянию "Включено"'))]),
											E('tr', [E('td', [state_off_term.render()]), E('td', _(' - соответствует состоянию "Выключено"'))])
										])
									])
								]),
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title' }, _('Протокол') + ":"),
									E('div', { class: 'cbi-value-field' }, [
										E('div', { class: 'cbi-value-field-flex'}, [
											E('div', { class: 'cbi-value-field-1col'}, [
												proto.render()
												
											]),
											E('div', { class: 'cbi-value-field-2col'}, [
												// ADAPTER WIDGETS RENDER
												emptyProto.render(),
												<%
													for atype, adapter in pairs(adapter_list) do
														print(adapter():render("jsrender") .. ",\n")
													end
												%>
												E('div', { class: 'table modal-section-param more-params'}, [
													E('div', {class: 'tr table-titles'}, [
														E('div', {class: 'th', style: 'width: 100%'}, _("Параметры подключения реле")),
														E('div', {class: 'th'}, _("Значение")),
													]),
													E('div', {class: 'tr cbi-rowstyle-1'}, [
														E('div', {class: 'td'}, "Номер реле на удалённом устройстве"),
														E('div', {class: 'td', style: "text-align: right;"}, [relay_number.render()])
													]),
													E('div', {class: 'tr cbi-rowstyle-2'}, [
														E('div', {class: 'td'}, "Время перезагрузки реле"),
														E('div', {class: 'td', style: "text-align: right;"}, [restart_time.render()])
													])
												]),
												E('button', {
													'class': 'cbi-button cbi-button-apply',
													'data-action': 'show',
													'style': 'display: initial;',
													'click': ui.createHandlerFn(this, 'toggle_more')
												}, _('Дополнительные параметры') )
											])
										])
									])
								]),
							])
						])
					]),

					E('div', { class: 'cbi-value-field' }, [
						E('div', { 
							class: 'btn', 
							click: function() { L.hideModal() }
						}, _('Закрыть')),
						' ',
						E('div', { class: 'btn success', "name": "apply",
							'click': ui.createHandlerFn(this, function() {
								// TODO
								// make a generation like this:
								// if(relay_data["proto"] == "SNMP") adapter_snmp.saveValue()
								// adapter_data["netping_luci_relay_adapter_snmp"] = adapter_snmp.getValue()
								<%
									for atype, adapter in pairs(adapter_list) do
										print(string.format('adapter_data["%s"] = %s', atype, adapter():render("getvalues")))
									end
								%>
								// Check all form validity
								var widget_list = [proto, restart_time, relay_number, state_on_term, state_off_term];
								var form_valid = true;
								for(var w of widget_list) {
									if(!w.isValid()) {
										form_valid = false
										break;
									}
								}
								if (form_valid) {
									relay_data["name"] = memo.getValue()
									relay_data["proto"] = proto.getValue()
									relay_data["restart_time"] = restart_time.getValue()
									relay_data["number"] = relay_number.getValue()
									globals_data["state"] = []
									globals_data["state"][0] = "0." + state_off_term.getValue()
									globals_data["state"][1] = "1." + state_on_term.getValue()
									return handleEdit(relay_id, relay_data, globals_data, adapter_data);
								}
								else {
									return 0;
								}

							})
						}, _('Сохранить'))
					])
				]);
			})	
		})
	})
}

function handleEdit(relay_id, relay_data, globals_data, adapter_data) {
	send_action("edit", relay_id, { "relay_data": relay_data, "globals_data": globals_data, "adapter_data": adapter_data } )
}
//]]>
</script>